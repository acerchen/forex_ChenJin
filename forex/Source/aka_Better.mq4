/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright ?2008, AutoTrader fx-auto-trader@mail.ru"
#property link      "fx-auto-trader@mail.ru"

#include <stdlib.mqh>

extern double lots = 0.1;
extern int Slippage = 2;
extern int Warp = 67;
extern double Deviation = 1.85;
extern int Amplitude = 155;
extern double Distortion = 0.79;
extern bool SL_long_EQUAL_SL_short = FALSE;
extern double SL_long = 80.0;
extern double SL_short = 65.0;
extern bool UseSound = TRUE;
extern int MagicNumber = 55555;
string gs_140 = "PNN Shell ?2008, FX-Systems Co Ltd";
int gt_148 = 0;
int gi_152 = 6;
double gd_156 = 5.0;
double gd_164 = 25.0;

void init() {
   if (SL_long_EQUAL_SL_short == TRUE) SL_short = SL_long;
}

void deinit() {
}

void start() {
   int li_0;
   int li_4;
   int li_8;
   int li_16;
   ExternalParametersCheck();
   CheckConditions();
   if (Time[0] != gt_148) {
      gt_148 = Time[0];
      li_0 = 3;
      if (IsTradeAllowed()) {
         RefreshRates();
         li_0 = MarketInfo(Symbol(), MODE_SPREAD);
      } else {
         gt_148 = Time[1];
         return;
      }
      li_4 = -1;
      li_8 = OrdersTotal();
      for (int li_12 = li_8 - 1; li_12 >= 0; li_12--) {
         OrderSelect(li_12, SELECT_BY_POS, MODE_TRADES);
         if (OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber) {
            li_16 = OrderTicket();
            if (OrderType() == OP_BUY) {
               if (Bid <= OrderStopLoss() + (2.0 * SL_long + li_0) * Point) return;
               if (Direction(Warp, Deviation, Amplitude, Distortion) < 0.0) {
                  li_4 = OrderSendReliable(Symbol(), OP_SELL, lots, Bid, Slippage, Ask + SL_short * Point, 0, gs_140, MagicNumber, 0, Red);
                  Sleep(30000);
                  if (li_4 < 0) {
                     gt_148 = Time[1];
                     return;
                  }
                  OrderSelect(li_16, SELECT_BY_TICKET);
                  OrderClose(li_16, OrderLots(), Bid, 3, Blue);
                  return;
               }
               if (!(!OrderModifyReliable(OrderTicket(), OrderOpenPrice(), Bid - SL_long * Point, 0, 0, Blue))) return;
               Sleep(30000);
               gt_148 = Time[1];
               return;
            }
            if (Ask >= OrderStopLoss() - (2.0 * SL_short + li_0) * Point) return;
            if (Direction(Warp, Deviation, Amplitude, Distortion) > 0.0) {
               li_4 = OrderSendReliable(Symbol(), OP_BUY, lots, Ask, Slippage, Bid - SL_long * Point, 0, gs_140, MagicNumber, 0, Blue);
               Sleep(30000);
               if (li_4 < 0) {
                  gt_148 = Time[1];
                  return;
               }
               OrderSelect(li_16, SELECT_BY_TICKET);
               OrderClose(li_16, OrderLots(), Ask, 3, Blue);
               return;
            }
            if (!(!OrderModifyReliable(OrderTicket(), OrderOpenPrice(), Ask + SL_short * Point, 0, 0, Blue))) return;
            Sleep(30000);
            gt_148 = Time[1];
            return;
         }
      }
      if (Direction(Warp, Deviation, Amplitude, Distortion) > 0.0) {
         li_4 = OrderSendReliable(Symbol(), OP_BUY, lots, Ask, Slippage, Bid - SL_long * Point, 0, gs_140, MagicNumber, 0, Blue);
         if (li_4 < 0) {
            Sleep(30000);
            gt_148 = Time[1];
         }
      } else {
         li_4 = OrderSendReliable(Symbol(), OP_SELL, lots, Bid, Slippage, Ask + SL_short * Point, 0, gs_140, MagicNumber, 0, Red);
         if (li_4 < 0) {
            Sleep(30000);
            gt_148 = Time[1];
         }
      }
   }
}

double Direction(int ai_0, double ad_4, int ai_12, double ad_16) {
   double ld_24 = 0;
   double ld_32 = iAC(Symbol(), 0, 0);
   double ld_40 = iAC(Symbol(), 0, 7);
   double ld_48 = iAC(Symbol(), 0, 14);
   double ld_56 = iAC(Symbol(), 0, 21);
   ld_24 = ai_0 * ld_32 + 100.0 * (ad_4 - 1.0) * ld_40 + (ai_12 - 100) * ld_48 + 100.0 * ad_16 * ld_56;
   return (ld_24);
}

void ExternalParametersCheck() {
   if (Slippage > 10) {
      Comment("... Asks too ? High? Value of slippage Slippage,", 
      "\n", "... Adjust to ? It was not more ? 10 ?? restart ? Exper ?");
      return;
   }
   if (Warp > 100 || Warp < -100) {
      Comment("... Wrong ? Backside ? Option distortion Warp,", 
         "\n", "... Acceptable values ??range from -100 to +100 ? Stepper ? 1,", 
      "\n", "... Correct ? Restart ? Exper ?");
      return;
   }
   if (Deviation > 2.0 || Warp < 0) {
      Comment("... Wrong ? Backside ? Parameter deviation Deviation,", 
         "\n", "... Acceptable values ??range from 0 to 2 ? Stepper ? 0.01,", 
      "\n", "... Correct ? Restart ? Exper ?");
      return;
   }
   if (Amplitude > 200 || Amplitude < 0) {
      Comment("... Wrong ? Backside ? Parameter deviation Amplitude,", 
         "\n", "... Acceptable values ??range from 0 to 200 ? Stepper ? 1,", 
      "\n", "... Correct ? Restart ? Exper ?");
      return;
   }
   if (Distortion > 1.0 || Distortion < -1.0) {
      Comment("... Wrong ? Backside ? Parameter deviation Distortion,", 
         "\n", "... Acceptable values ??range from -1 to +1 ? Stepper ? 0.01 ,", 
      "\n", "... Correct ? Restart ? Exper ?");
      return;
   }
}

void CheckConditions() {
   if (IsConnected() == FALSE) {
      Comment(" ... Absent ? Us ? Trading server\n" + " ... Pri¸ ? Sales teams STOPPED");
      return;
   }
   if (IsTradeContextBusy() == TRUE) Comment(" ... Shopping Poto ? BUSY\n" + " ... bid? Team?not sent to the server");
}

int OrderSendReliable(string as_0, int ai_8, double ad_12, double ad_20, int ai_28, double ad_32, double ad_40, string as_48, int ai_56, int ai_60 = 0, color ai_64 = -1) {
   double ld_96;
   if (!IsConnected()) {
      Print("OrderSendReliable:  error: IsConnected() == false");
      return (-1);
   }
   if (IsStopped()) {
      Print("OrderSendReliable:  error: IsStopped() == true");
      return (-1);
   }
   for (int li_68 = 0; !IsTradeAllowed() && li_68 < gi_152; li_68++) OrderReliable_SleepRandomTime(gd_156, gd_164);
   if (!IsTradeAllowed()) {
      Print("OrderSendReliable: error: no operation possible because IsTradeAllowed()==false, even after retries.");
      return (-1);
   }
   int li_72 = MarketInfo(as_0, MODE_DIGITS);
   if (li_72 > 0) {
      ad_20 = NormalizeDouble(ad_20, li_72);
      ad_32 = NormalizeDouble(ad_32, li_72);
      ad_40 = NormalizeDouble(ad_40, li_72);
   }
   if (ad_32 != 0.0) OrderReliable_EnsureValidStop(as_0, ad_20, ad_32);
   int li_76 = GetLastError();
   li_76 = 0;
   bool li_80 = FALSE;
   bool li_84 = FALSE;
   int li_88 = -1;
   if (ai_8 == OP_BUYSTOP || ai_8 == OP_SELLSTOP) {
      li_68 = 0;
      while (!li_80) {
         if (IsTradeAllowed()) {
            li_88 = OrderSend(as_0, ai_8, ad_12, ad_20, ai_28, ad_32, ad_40, as_48, ai_56, ai_60, ai_64);
            li_76 = GetLastError();
         } else li_68++;
         switch (li_76) {
         case 0/* NO_ERROR */:
            li_80 = TRUE;
            break;
         case 4/* SERVER_BUSY */:
         case 6/* NO_CONNECTION */:
         case 129/* INVALID_PRICE */:
         case 136/* OFF_QUOTES */:
         case 137/* BROKER_BUSY */:
         case 146/* TRADE_CONTEXT_BUSY */:
            li_68++;
            break;
         case 135/* PRICE_CHANGED */:
         case 138/* REQUOTE */:
            RefreshRates();
            continue;
            break;
         case 130/* INVALID_STOPS */:
            ld_96 = MarketInfo(as_0, MODE_STOPLEVEL) * MarketInfo(as_0, MODE_POINT);
            if (ai_8 == OP_BUYSTOP) {
               if (MathAbs(Ask - ad_20) <= ld_96) li_84 = TRUE;
            } else {
               if (ai_8 == OP_SELLSTOP)
                  if (MathAbs(Bid - ad_20) <= ld_96) li_84 = TRUE;
            }
            li_80 = TRUE;
            break;
         default:
            li_80 = TRUE;
         }
         if (li_68 > gi_152) li_80 = TRUE;
         if (li_80) {
            if (li_76 != 0/* NO_ERROR */) Print("OrderSendReliable: non-retryable error: " + ErrorDescription(li_76));
            if (li_68 > gi_152) Print("OrderSendReliable: retry attempts maxed at " + gi_152);
         }
         if (!li_80) {
            Print("OrderSendReliable: retryable error (" + li_68 + "/" + gi_152 + "): " + ErrorDescription(li_76));
            OrderReliable_SleepRandomTime(gd_156, gd_164);
            RefreshRates();
         }
      }
      if (li_76 == 0/* NO_ERROR */) {
         Print("OrderSendReliable: apparently successful OP_BUYSTOP or OP_SELLSTOP order placed, details follow.");
         OrderSelect(li_88, SELECT_BY_TICKET, MODE_TRADES);
         OrderPrint();
         return (li_88);
      }
      if (!li_84) {
         Print("OrderSendReliable: failed to execute OP_BUYSTOP/OP_SELLSTOP, after " + li_68 + " retries");
         Print("OrderSendReliable: failed trade: " + OrderReliable_CommandString(ai_8) + " " + as_0 + "@" + ad_20 + " tp@" + ad_40 + " sl@" + ad_32);
         Print("OrderSendReliable: last error: " + ErrorDescription(li_76));
         return (-1);
      }
   }
   if (li_84) {
      Print("OrderSendReliable: going from limit order to market order because market is too close.");
      if (ai_8 == OP_BUYSTOP) {
         ai_8 = 0;
         ad_20 = Ask;
      } else {
         if (ai_8 == OP_SELLSTOP) {
            ai_8 = 1;
            ad_20 = Bid;
         }
      }
   }
   li_76 = GetLastError();
   li_76 = 0;
   li_88 = -1;
   if (ai_8 == OP_BUY || ai_8 == OP_SELL) {
      li_68 = 0;
      while (!li_80) {
         if (IsTradeAllowed()) {
            li_88 = OrderSend(as_0, ai_8, ad_12, ad_20, ai_28, ad_32, ad_40, as_48, ai_56, ai_60, ai_64);
            li_76 = GetLastError();
         } else li_68++;
         switch (li_76) {
         case 0/* NO_ERROR */:
            li_80 = TRUE;
            break;
         case 4/* SERVER_BUSY */:
         case 6/* NO_CONNECTION */:
         case 129/* INVALID_PRICE */:
         case 136/* OFF_QUOTES */:
         case 137/* BROKER_BUSY */:
         case 146/* TRADE_CONTEXT_BUSY */:
            li_68++;
            break;
         case 135/* PRICE_CHANGED */:
         case 138/* REQUOTE */:
            RefreshRates();
            continue;
            break;
         default:
            li_80 = TRUE;
         }
         if (li_68 > gi_152) li_80 = TRUE;
         if (!li_80) {
            Print("OrderSendReliable: retryable error (" + li_68 + "/" + gi_152 + "): " + ErrorDescription(li_76));
            OrderReliable_SleepRandomTime(gd_156, gd_164);
            RefreshRates();
         }
         if (li_80) {
            if (li_76 != 0/* NO_ERROR */) Print("OrderSendReliable: non-retryable error: " + ErrorDescription(li_76));
            if (li_68 > gi_152) Print("OrderSendReliable: retry attempts maxed at " + gi_152);
         }
      }
      if (li_76 == 0/* NO_ERROR */) {
         Print("OrderSendReliable: apparently successful OP_BUY or OP_SELL order placed, details follow.");
         OrderSelect(li_88, SELECT_BY_TICKET, MODE_TRADES);
         OrderPrint();
         return (li_88);
      }
      Print("OrderSendReliable: failed to execute OP_BUY/OP_SELL, after " + li_68 + " retries");
      Print("OrderSendReliable: failed trade: " + OrderReliable_CommandString(ai_8) + " " + as_0 + "@" + ad_20 + " tp@" + ad_40 + " sl@" + ad_32);
      Print("OrderSendReliable: last error: " + ErrorDescription(li_76));
      return (-1);
   }
   return (0);
}

bool OrderModifyReliable(int ai_0, double ad_4, double ad_12, double ad_20, int ai_28, color ai_32 = -1) {
   string ls_40;
   if (!IsConnected()) {
      Print("OrderModifyReliable:  error: IsConnected() == false");
      return (-1);
   }
   if (IsStopped()) {
      Print("OrderModifyReliable:  error: IsStopped() == true");
      return (-1);
   }
   for (int li_36 = 0; !IsTradeAllowed() && li_36 < gi_152; li_36++) OrderReliable_SleepRandomTime(gd_156, gd_164);
   if (!IsTradeAllowed()) {
      Print("OrderModifyReliable: error: no operation possible because IsTradeAllowed()==false, even after retries.");
      return (-1);
   }
   int li_52 = GetLastError();
   li_52 = 0;
   bool li_56 = FALSE;
   li_36 = 0;
   bool li_60 = FALSE;
   while (!li_56) {
      if (IsTradeAllowed()) {
         li_60 = OrderModify(ai_0, ad_4, ad_12, ad_20, ai_28, ai_32);
         li_52 = GetLastError();
      } else li_36++;
      if (li_60 == TRUE) li_56 = TRUE;
      switch (li_52) {
      case 0/* NO_ERROR */:
         li_56 = TRUE;
         break;
      case 1/* NO_RESULT */:
         li_56 = TRUE;
         break;
      case 4/* SERVER_BUSY */:
      case 6/* NO_CONNECTION */:
      case 129/* INVALID_PRICE */:
      case 136/* OFF_QUOTES */:
      case 137/* BROKER_BUSY */:
      case 146/* TRADE_CONTEXT_BUSY */:
         li_36++;
         break;
      case 135/* PRICE_CHANGED */:
      case 138/* REQUOTE */:
         RefreshRates();
         continue;
         break;
      default:
         li_56 = TRUE;
      }
      if (li_36 > gi_152) li_56 = TRUE;
      if (!li_56) {
         Print("OrderModifyReliable: retryable error (" + li_36 + "/" + gi_152 + "): " + ErrorDescription(li_52));
         OrderReliable_SleepRandomTime(gd_156, gd_164);
         RefreshRates();
      }
      if (li_56) {
         if (li_52 != 0/* NO_ERROR */ && li_52 != 1/* NO_RESULT */) Print("OrderModifyReliable: non-retryable error: " + ErrorDescription(li_52));
         if (li_36 > gi_152) Print("OrderModifyReliable: retry attempts maxed at " + gi_152);
      }
   }
   if (li_52 == 0/* NO_ERROR */) {
      Print("OrderModifyReliable: apparently successful modification order, updated trade details follow.");
      OrderSelect(ai_0, SELECT_BY_TICKET, MODE_TRADES);
      OrderPrint();
      return (TRUE);
   }
   if (li_52 == 1/* NO_RESULT */) {
      Print("OrderModifyReliable:  Server reported modify order did not actually change parameters.");
      Print("OrderModifyReliable:  redundant modification: " + ai_0 + " " + ls_40 + "@" + ad_4 + " tp@" + ad_20 + " sl@" + ad_12);
      Print("OrderModifyReliable:  Suggest modifying code logic");
   }
   Print("OrderModifyReliable: failed to execute modify after " + li_36 + " retries");
   Print("OrderModifyReliable: failed modification: " + ai_0 + " " + ls_40 + "@" + ad_4 + " tp@" + ad_20 + " sl@" + ad_12);
   Print("OrderModifyReliable: last error: " + ErrorDescription(li_52));
   return (FALSE);
}

void OrderReliable_EnsureValidStop(string as_0, double ad_8, double &ad_16) {
   double ld_24;
   if (ad_16 != 0.0) {
      ld_24 = MarketInfo(as_0, MODE_STOPLEVEL) * MarketInfo(as_0, MODE_POINT);
      if (MathAbs(ad_8 - ad_16) <= ld_24) {
         if (ad_8 > ad_16) ad_16 = ad_8 - ld_24;
         else {
            if (ad_8 < ad_16) ad_16 = ad_8 + ld_24;
            else Print("OrderReliable_EnsureValidStop: error, passed in price == sl, cannot adjust");
         }
         ad_16 = NormalizeDouble(ad_16, MarketInfo(as_0, MODE_DIGITS));
      }
   }
}

string OrderReliable_CommandString(int ai_0) {
   if (ai_0 == 0) return ("OP_BUY");
   if (ai_0 == 1) return ("OP_SELL");
   if (ai_0 == 4) return ("OP_BUYSTOP");
   if (ai_0 == 5) return ("OP_SELLSTOP");
   return ("(CMD==" + ai_0 + ")");
}

void OrderReliable_SleepRandomTime(double ad_0, double ad_8) {
   double ld_16;
   int li_24;
   double ld_28;
   if (IsTesting() == 0) {
      ld_16 = MathCeil(ad_0 / 0.1);
      if (ld_16 > 0.0) {
         li_24 = MathRound(ad_8 / 0.1);
         ld_28 = 1.0 - 1.0 / ld_16;
         Sleep(1000);
         for (int li_36 = 0; li_36 < li_24; li_36++) {
            if (MathRand() > 32768.0 * ld_28) break;
            Sleep(1000);
         }
      }
   }
}
